[
    {
    "domain": "Java",
    "questions": [
      {
        "id": 1,
        "question": "Which method is the entry point of a Java program?",
        "options": ["start()", "main()", "run()", "init()"],
        "answer": "main()",
        "explanation": "In Java, execution starts from the main() method."
      },
      {
        "id": 2,
        "question": "Which keyword is used to inherit a class in Java?",
        "options": ["inherits", "extends", "implements", "super"],
        "answer": "extends",
        "explanation": "The 'extends' keyword is used for class inheritance."
      },
      {
        "id": 3,
        "question": "Which of these is not a Java primitive type?",
        "options": ["int", "boolean", "char", "String"],
        "answer": "String",
        "explanation": "String is a class in Java, not a primitive type."
      },
      {
        "id": 4,
        "question": "Which keyword is used to prevent method overriding?",
        "options": ["static", "constant", "final", "volatile"],
        "answer": "final",
        "explanation": "The 'final' keyword prevents method overriding."
      },
      {
        "id": 5,
        "question": "What is the size of an int in Java?",
        "options": ["4 bytes", "2 bytes", "8 bytes", "Depends on OS"],
        "answer": "4 bytes",
        "explanation": "An int in Java always occupies 4 bytes."
      },
      {
        "id": 6,
        "question": "Which collection class allows duplicate elements?",
        "options": ["HashSet", "TreeSet", "ArrayList", "HashMap"],
        "answer": "ArrayList",
        "explanation": "ArrayList allows duplicate elements while Sets do not."
      },
      {
        "id": 7,
        "question": "Which exception is thrown when dividing by zero in Java?",
        "options": ["NullPointerException", "ArithmeticException", "NumberFormatException", "IllegalArgumentException"],
        "answer": "ArithmeticException",
        "explanation": "Dividing an integer by zero throws ArithmeticException."
      },
      {
        "id": 8,
        "question": "Which keyword is used to create an object in Java?",
        "options": ["create", "make", "new", "allocate"],
        "answer": "new",
        "explanation": "The 'new' keyword is used to create new objects in Java."
      },
      {
        "id": 9,
        "question": "Which interface must be implemented to create a thread in Java?",
        "options": ["Runnable", "Callable", "Serializable", "Threadable"],
        "answer": "Runnable",
        "explanation": "A class can create a thread by implementing Runnable."
      },
      {
        "id": 10,
        "question": "Which keyword is used to handle exceptions in Java?",
        "options": ["throw", "try", "catch", "finally"],
        "answer": "catch",
        "explanation": "'catch' block handles exceptions thrown in 'try' block."
      },
      {
        "id": 11,
        "question": "What does JVM stand for?",
        "options": ["Java Virtual Machine", "Java Variable Method", "Java Version Manager", "Java Visual Model"],
        "answer": "Java Virtual Machine",
        "explanation": "JVM executes Java bytecode and provides a runtime environment."
      },
      {
        "id": 12,
        "question": "Which keyword is used to define a constant in Java?",
        "options": ["const", "static", "final", "constant"],
        "answer": "final",
        "explanation": "The 'final' keyword makes variables constant in Java."
      },
      {
        "id": 13,
        "question": "Which package contains the Scanner class?",
        "options": ["java.io", "java.util", "java.net", "java.text"],
        "answer": "java.util",
        "explanation": "The Scanner class is part of java.util package."
      },
      {
        "id": 14,
        "question": "Which collection class maintains insertion order?",
        "options": ["HashSet", "LinkedHashSet", "TreeSet", "PriorityQueue"],
        "answer": "LinkedHashSet",
        "explanation": "LinkedHashSet maintains insertion order while HashSet does not."
      },
      {
        "id": 15,
        "question": "Which method is called when an object is garbage collected?",
        "options": ["delete()", "finalize()", "clean()", "dispose()"],
        "answer": "finalize()",
        "explanation": "The finalize() method is called before an object is destroyed by the GC."
      }
    ]
  },

    {
    "domain": "OOP",
    "questions": [
      {
        "id": 1,
        "question": "Which of the following is not a pillar of OOP?",
        "options": ["Encapsulation", "Polymorphism", "Abstraction", "Compilation"],
        "answer": "Compilation",
        "explanation": "The four pillars of OOP are encapsulation, polymorphism, abstraction, and inheritance."
      },
      {
        "id": 2,
        "question": "Which OOP principle allows different classes to be treated as objects of a common superclass?",
        "options": ["Inheritance", "Polymorphism", "Encapsulation", "Abstraction"],
        "answer": "Polymorphism",
        "explanation": "Polymorphism enables a single interface to represent different underlying types."
      },
      {
        "id": 3,
        "question": "Hiding internal details and showing only essential features is called?",
        "options": ["Encapsulation", "Polymorphism", "Abstraction", "Inheritance"],
        "answer": "Abstraction",
        "explanation": "Abstraction hides implementation details while showing the necessary functionality."
      },
      {
        "id": 4,
        "question": "Wrapping data and methods into a single unit is called?",
        "options": ["Encapsulation", "Polymorphism", "Abstraction", "Inheritance"],
        "answer": "Encapsulation",
        "explanation": "Encapsulation binds variables and methods together in a single class."
      },
      {
        "id": 5,
        "question": "Which OOP principle is achieved using method overloading?",
        "options": ["Encapsulation", "Compile-time Polymorphism", "Abstraction", "Inheritance"],
        "answer": "Compile-time Polymorphism",
        "explanation": "Method overloading is a type of compile-time polymorphism."
      },
      {
        "id": 6,
        "question": "Which OOP concept is implemented using 'extends' keyword in Java?",
        "options": ["Inheritance", "Polymorphism", "Encapsulation", "Abstraction"],
        "answer": "Inheritance",
        "explanation": "The 'extends' keyword is used to achieve inheritance in Java."
      },
      {
        "id": 7,
        "question": "Which type of inheritance is not supported in Java?",
        "options": ["Single", "Multiple", "Multilevel", "Hierarchical"],
        "answer": "Multiple",
        "explanation": "Java does not support multiple inheritance with classes to avoid ambiguity."
      },
      {
        "id": 8,
        "question": "The process of defining a new class based on an existing class is called?",
        "options": ["Encapsulation", "Inheritance", "Abstraction", "Overriding"],
        "answer": "Inheritance",
        "explanation": "Inheritance allows a class to reuse code from an existing class."
      },
      {
        "id": 9,
        "question": "Which OOP concept allows the same method name with different parameter lists?",
        "options": ["Overriding", "Overloading", "Encapsulation", "Abstraction"],
        "answer": "Overloading",
        "explanation": "Method overloading allows the same method name with different parameters."
      },
      {
        "id": 10,
        "question": "Which access modifier allows visibility only within the same package and subclasses?",
        "options": ["private", "public", "protected", "default"],
        "answer": "protected",
        "explanation": "Protected members are accessible within the same package and in subclasses."
      },
      {
        "id": 11,
        "question": "Which OOP principle is implemented using interfaces in Java?",
        "options": ["Encapsulation", "Multiple Inheritance", "Polymorphism", "Abstraction"],
        "answer": "Abstraction",
        "explanation": "Interfaces provide abstraction by hiding implementation details."
      },
      {
        "id": 12,
        "question": "Which method is used to allocate memory to an object?",
        "options": ["allocate()", "malloc()", "new", "create()"],
        "answer": "new",
        "explanation": "In Java, the 'new' keyword allocates memory for objects."
      },
      {
        "id": 13,
        "question": "Which OOP concept means defining multiple methods with the same name but different parameters?",
        "options": ["Overloading", "Overriding", "Inheritance", "Encapsulation"],
        "answer": "Overloading",
        "explanation": "Overloading allows multiple methods with the same name but different parameter lists."
      },
      {
        "id": 14,
        "question": "What is it called when a subclass provides a specific implementation of a method already defined in its superclass?",
        "options": ["Overloading", "Overriding", "Encapsulation", "Abstraction"],
        "answer": "Overriding",
        "explanation": "Method overriding lets a subclass modify a method from its superclass."
      },
      {
        "id": 15,
        "question": "Which keyword is used to refer to the current object in Java?",
        "options": ["this", "self", "super", "current"],
        "answer": "this",
        "explanation": "The 'this' keyword refers to the current object in Java."
      }
    ]
  },
  {
    "domain": "SQL",
    "questions": [
      {
        "id": 1,
        "question": "Which SQL clause is used to filter records?",
        "options": ["ORDER BY", "GROUP BY", "WHERE", "HAVING"],
        "answer": "WHERE",
        "explanation": "The WHERE clause filters rows based on a condition."
      },
      {
        "id": 2,
        "question": "Which SQL statement is used to extract data from a database?",
        "options": ["SELECT", "GET", "EXTRACT", "OPEN"],
        "answer": "SELECT",
        "explanation": "The SELECT statement is used to query data from a database."
      },
      {
        "id": 3,
        "question": "What is the difference between WHERE and HAVING?",
        "options": [
          "WHERE filters rows before grouping, HAVING filters after grouping",
          "WHERE filters after grouping, HAVING filters before grouping",
          "Both filter after grouping",
          "Both filter before grouping"
        ],
        "answer": "WHERE filters rows before grouping, HAVING filters after grouping",
        "explanation": "WHERE is used to filter rows before aggregation; HAVING is used after aggregation."
      },
      {
        "id": 4,
        "question": "Which function is used to count the number of rows in SQL?",
        "options": ["SUM()", "COUNT()", "TOTAL()", "NUMBER()"],
        "answer": "COUNT()",
        "explanation": "COUNT() returns the number of rows that match a condition."
      },
      {
        "id": 5,
        "question": "Which SQL command is used to remove a table from a database?",
        "options": ["DELETE", "DROP", "REMOVE", "TRUNCATE"],
        "answer": "DROP",
        "explanation": "DROP TABLE removes a table and its data from the database."
      },
      {
        "id": 6,
        "question": "What is the main difference between DELETE and TRUNCATE?",
        "options": [
          "DELETE removes specific rows, TRUNCATE removes all rows and resets identity",
          "DELETE removes all rows, TRUNCATE removes specific rows",
          "Both remove all rows but keep structure",
          "TRUNCATE can use WHERE clause, DELETE cannot"
        ],
        "answer": "DELETE removes specific rows, TRUNCATE removes all rows and resets identity",
        "explanation": "DELETE can remove specific rows using WHERE; TRUNCATE removes all rows and resets identity counters."
      },
      {
        "id": 7,
        "question": "Which SQL keyword is used to group rows that have the same values?",
        "options": ["GROUP BY", "ORDER BY", "PARTITION BY", "UNION"],
        "answer": "GROUP BY",
        "explanation": "GROUP BY groups rows with identical values into summary rows."
      },
      {
        "id": 8,
        "question": "Which SQL operator is used to test for the presence of a value in a set?",
        "options": ["ANY", "BETWEEN", "IN", "LIKE"],
        "answer": "IN",
        "explanation": "The IN operator checks if a value matches any value in a list or subquery."
      },
      {
        "id": 9,
        "question": "What is the difference between INNER JOIN and LEFT JOIN?",
        "options": [
          "INNER JOIN returns only matching rows, LEFT JOIN returns all rows from left table",
          "INNER JOIN returns all rows from both tables, LEFT JOIN returns matching rows only",
          "Both return all rows",
          "LEFT JOIN returns only matching rows"
        ],
        "answer": "INNER JOIN returns only matching rows, LEFT JOIN returns all rows from left table",
        "explanation": "LEFT JOIN includes all rows from the left table, with NULLs for unmatched rows."
      },
      {
        "id": 10,
        "question": "Which SQL command is used to remove all rows from a table but keep its structure?",
        "options": ["DELETE", "DROP", "TRUNCATE", "CLEAR"],
        "answer": "TRUNCATE",
        "explanation": "TRUNCATE removes all rows but keeps the table structure for future use."
      },
      {
        "id": 11,
        "question": "What is the difference between UNION and UNION ALL?",
        "options": [
          "UNION removes duplicates, UNION ALL keeps duplicates",
          "UNION keeps duplicates, UNION ALL removes duplicates",
          "Both remove duplicates",
          "Both keep duplicates"
        ],
        "answer": "UNION removes duplicates, UNION ALL keeps duplicates",
        "explanation": "UNION performs a distinct operation while UNION ALL includes all rows."
      },
      {
        "id": 12,
        "question": "Which SQL function returns the largest value in a set?",
        "options": ["MAX()", "HIGH()", "TOP()", "LARGEST()"],
        "answer": "MAX()",
        "explanation": "MAX() returns the maximum value from a set of values."
      },
      {
        "id": 13,
        "question": "What is the difference between CHAR and VARCHAR?",
        "options": [
          "CHAR has fixed length, VARCHAR has variable length",
          "CHAR has variable length, VARCHAR has fixed length",
          "Both have fixed length",
          "Both have variable length"
        ],
        "answer": "CHAR has fixed length, VARCHAR has variable length",
        "explanation": "CHAR is fixed-length and padded with spaces, VARCHAR adjusts size dynamically."
      },
      {
        "id": 14,
        "question": "Which SQL operator is used for pattern matching?",
        "options": ["IN", "BETWEEN", "LIKE", "MATCH"],
        "answer": "LIKE",
        "explanation": "LIKE is used for pattern matching in string data."
      },
      {
        "id": 15,
        "question": "What is the difference between PRIMARY KEY and UNIQUE?",
        "options": [
          "PRIMARY KEY cannot have NULLs, UNIQUE can have one NULL",
          "PRIMARY KEY can have one NULL, UNIQUE cannot have NULLs",
          "Both allow multiple NULLs",
          "Both cannot have NULLs"
        ],
        "answer": "PRIMARY KEY cannot have NULLs, UNIQUE can have one NULL",
        "explanation": "A PRIMARY KEY enforces uniqueness and disallows NULLs; UNIQUE allows one NULL."
      }
    ]
  },
    {
    "domain": "DSA",
    "questions": [
      {
        "id": 1,
        "question": "What is the time complexity of binary search?",
        "options": ["O(n)", "O(log n)", "O(n log n)", "O(1)"],
        "answer": "O(log n)",
        "explanation": "Binary search halves the search interval in each step, giving logarithmic complexity."
      },
      {
        "id": 2,
        "question": "Which data structure is used for implementing recursion?",
        "options": ["Queue", "Stack", "Heap", "Graph"],
        "answer": "Stack",
        "explanation": "Recursion uses the call stack to manage function calls."
      },
      {
        "id": 3,
        "question": "What is the difference between BFS and DFS?",
        "options": [
          "BFS explores level by level, DFS explores as far as possible along one branch",
          "BFS uses a stack, DFS uses a queue",
          "DFS explores level by level, BFS explores deeply",
          "BFS works only on trees, DFS works on all graphs"
        ],
        "answer": "BFS explores level by level, DFS explores as far as possible along one branch",
        "explanation": "BFS uses a queue to explore breadth-wise, DFS uses a stack to go deep first."
      },
      {
        "id": 4,
        "question": "Which sorting algorithm has O(n^2) average case complexity?",
        "options": ["Merge Sort", "Quick Sort", "Bubble Sort", "Heap Sort"],
        "answer": "Bubble Sort",
        "explanation": "Bubble sort compares adjacent elements and has O(n^2) complexity."
      },
      {
        "id": 5,
        "question": "Which data structure uses FIFO?",
        "options": ["Stack", "Queue", "Tree", "Graph"],
        "answer": "Queue",
        "explanation": "Queue follows First-In-First-Out principle."
      },
      {
        "id": 6,
        "question": "What is the difference between a stack and a queue?",
        "options": [
          "Stack is LIFO, Queue is FIFO",
          "Stack is FIFO, Queue is LIFO",
          "Both are LIFO",
          "Both are FIFO"
        ],
        "answer": "Stack is LIFO, Queue is FIFO",
        "explanation": "Stack removes last inserted element first, queue removes first inserted element first."
      },
      {
        "id": 7,
        "question": "What is the best case time complexity of Quick Sort?",
        "options": ["O(n^2)", "O(n log n)", "O(n)", "O(log n)"],
        "answer": "O(n log n)",
        "explanation": "Quick Sort's best case occurs when pivot divides the array into two equal halves."
      },
      {
        "id": 8,
        "question": "Which data structure is used for BFS implementation?",
        "options": ["Stack", "Queue", "Array", "Linked List"],
        "answer": "Queue",
        "explanation": "BFS uses a queue to store nodes at the current level."
      },
      {
        "id": 9,
        "question": "What is the height of a balanced binary tree with n nodes?",
        "options": ["O(1)", "O(log n)", "O(n)", "O(n log n)"],
        "answer": "O(log n)",
        "explanation": "A balanced binary tree's height grows logarithmically with the number of nodes."
      },
      {
        "id": 10,
        "question": "What is the difference between a binary tree and a binary search tree?",
        "options": [
          "BST has ordered nodes, binary tree does not",
          "Binary tree has ordered nodes, BST does not",
          "BST has no duplicate elements, binary tree can",
          "Binary tree is always balanced, BST is not"
        ],
        "answer": "BST has ordered nodes, binary tree does not",
        "explanation": "In a BST, left child < parent < right child; binary tree has no such order."
      },
      {
        "id": 11,
        "question": "Which algorithm is used for minimum spanning tree?",
        "options": ["Kruskal's", "BFS", "DFS", "Binary Search"],
        "answer": "Kruskal's",
        "explanation": "Kruskal's algorithm finds MST by sorting edges and adding them without forming cycles."
      },
      {
        "id": 12,
        "question": "What is the difference between Kruskal's and Prim's algorithm?",
        "options": [
          "Kruskal's works on edges, Prim's works on vertices",
          "Kruskal's works on vertices, Prim's works on edges",
          "Both work only on directed graphs",
          "Prim's is faster than Kruskal's in all cases"
        ],
        "answer": "Kruskal's works on edges, Prim's works on vertices",
        "explanation": "Kruskal's picks edges in order of weight, Prim's expands the MST from a starting vertex."
      },
      {
        "id": 13,
        "question": "Which sorting algorithm is stable?",
        "options": ["Quick Sort", "Merge Sort", "Heap Sort", "Selection Sort"],
        "answer": "Merge Sort",
        "explanation": "Merge Sort maintains the order of equal elements, making it stable."
      },
      {
        "id": 14,
        "question": "What is the difference between linear search and binary search?",
        "options": [
          "Linear search checks all elements, binary search halves search space",
          "Binary search checks all elements, linear search halves search space",
          "Both work only on sorted data",
          "Both have same time complexity"
        ],
        "answer": "Linear search checks all elements, binary search halves search space",
        "explanation": "Binary search works faster on sorted data; linear search works on any list."
      },
      {
        "id": 15,
        "question": "Which data structure is used in priority queues?",
        "options": ["Stack", "Heap", "Queue", "Graph"],
        "answer": "Heap",
        "explanation": "Heap is used to efficiently implement priority queues."
      }
    ]
  },
    {
    "domain": "Python",
    "questions": [
      {
        "id": 1,
        "question": "Which keyword is used to define a function in Python?",
        "options": ["function", "def", "lambda", "fun"],
        "answer": "def",
        "explanation": "The 'def' keyword is used to define a function in Python."
      },
      {
        "id": 2,
        "question": "Which data type is immutable in Python?",
        "options": ["List", "Dictionary", "Set", "Tuple"],
        "answer": "Tuple",
        "explanation": "Tuples cannot be modified after creation."
      },
      {
        "id": 3,
        "question": "What is the difference between a list and a tuple?",
        "options": [
          "Lists are mutable, tuples are immutable",
          "Lists are immutable, tuples are mutable",
          "Both are immutable",
          "Both are mutable"
        ],
        "answer": "Lists are mutable, tuples are immutable",
        "explanation": "Lists can be changed after creation, tuples cannot."
      },
      {
        "id": 4,
        "question": "Which statement is used to handle exceptions in Python?",
        "options": ["try-except", "catch", "handle", "error"],
        "answer": "try-except",
        "explanation": "The try-except block is used for exception handling."
      },
      {
        "id": 5,
        "question": "What is the output of len([1, 2, 3])?",
        "options": ["2", "3", "4", "Error"],
        "answer": "3",
        "explanation": "The len() function returns the number of elements in the list."
      },
      {
        "id": 6,
        "question": "What is the difference between 'is' and '==' in Python?",
        "options": [
          "'is' checks identity, '==' checks value equality",
          "'is' checks value equality, '==' checks identity",
          "Both check identity",
          "Both check value equality"
        ],
        "answer": "'is' checks identity, '==' checks value equality",
        "explanation": "'is' checks if two references point to the same object; '==' checks if their values are equal."
      },
      {
        "id": 7,
        "question": "Which function is used to get the type of an object?",
        "options": ["typeof()", "type()", "instanceof()", "gettype()"],
        "answer": "type()",
        "explanation": "type() returns the type of the object."
      },
      {
        "id": 8,
        "question": "What is the difference between a shallow copy and a deep copy?",
        "options": [
          "Shallow copy copies only references, deep copy copies values recursively",
          "Shallow copy copies values recursively, deep copy copies only references",
          "Both copy values recursively",
          "Both copy only references"
        ],
        "answer": "Shallow copy copies only references, deep copy copies values recursively",
        "explanation": "A shallow copy does not create copies of nested objects; a deep copy does."
      },
      {
        "id": 9,
        "question": "Which keyword is used to create a generator in Python?",
        "options": ["yield", "return", "generate", "gen"],
        "answer": "yield",
        "explanation": "The 'yield' keyword is used to create a generator."
      },
      {
        "id": 10,
        "question": "What is the difference between append() and extend() in Python lists?",
        "options": [
          "append() adds a single element, extend() adds elements from another iterable",
          "append() adds elements from iterable, extend() adds a single element",
          "Both add single elements",
          "Both add multiple elements"
        ],
        "answer": "append() adds a single element, extend() adds elements from another iterable",
        "explanation": "append() adds its argument as a single element, extend() iterates over its argument adding each element."
      },
      {
        "id": 11,
        "question": "Which module is used for regular expressions in Python?",
        "options": ["regex", "pyregex", "re", "expressions"],
        "answer": "re",
        "explanation": "The 're' module handles regular expressions in Python."
      },
      {
        "id": 12,
        "question": "What is the difference between remove() and pop() in Python lists?",
        "options": [
          "remove() deletes by value, pop() deletes by index",
          "remove() deletes by index, pop() deletes by value",
          "Both delete by value",
          "Both delete by index"
        ],
        "answer": "remove() deletes by value, pop() deletes by index",
        "explanation": "remove() removes the first matching value, pop() removes the element at a given index."
      },
      {
        "id": 13,
        "question": "Which function is used to open a file in Python?",
        "options": ["file()", "open()", "read()", "write()"],
        "answer": "open()",
        "explanation": "open() is used to open files in Python."
      },
      {
        "id": 14,
        "question": "What is the difference between global and local variables?",
        "options": [
          "Global variables are defined outside functions, local variables inside functions",
          "Local variables are defined outside functions, global variables inside functions",
          "Both are defined inside functions",
          "Both are defined outside functions"
        ],
        "answer": "Global variables are defined outside functions, local variables inside functions",
        "explanation": "Global variables can be accessed throughout the program; local variables only inside their function."
      },
      {
        "id": 15,
        "question": "Which keyword is used to define an anonymous function in Python?",
        "options": ["lambda", "anonymous", "func", "def"],
        "answer": "lambda",
        "explanation": "The 'lambda' keyword is used to create anonymous functions in Python."
      }
    ]
  },
    {
    "domain": "React",
    "questions": [
      {
        "id": 1,
        "question": "Which method is used to create components in React?",
        "options": ["createComponent()", "React.make()", "React.createElement()", "React.build()"],
        "answer": "React.createElement()",
        "explanation": "React.createElement() is used internally to create React elements."
      },
      {
        "id": 2,
        "question": "Which hook is used to manage state in a functional component?",
        "options": ["useState", "useEffect", "useReducer", "useMemo"],
        "answer": "useState",
        "explanation": "useState hook is used to manage local component state."
      },
      {
        "id": 3,
        "question": "What is the difference between useEffect and useLayoutEffect?",
        "options": [
          "useEffect runs after render, useLayoutEffect runs before browser paint",
          "useEffect runs before browser paint, useLayoutEffect runs after render",
          "Both run before paint",
          "Both run after paint"
        ],
        "answer": "useEffect runs after render, useLayoutEffect runs before browser paint",
        "explanation": "useLayoutEffect blocks browser painting until the effect runs."
      },
      {
        "id": 4,
        "question": "Which hook is used for performance optimization by memoizing values?",
        "options": ["useMemo", "useState", "useEffect", "useRef"],
        "answer": "useMemo",
        "explanation": "useMemo memoizes expensive calculations between renders."
      },
      {
        "id": 5,
        "question": "What is the difference between controlled and uncontrolled components?",
        "options": [
          "Controlled components are managed by React state, uncontrolled use DOM refs",
          "Controlled use DOM refs, uncontrolled are managed by React state",
          "Both use React state",
          "Both use DOM refs"
        ],
        "answer": "Controlled components are managed by React state, uncontrolled use DOM refs",
        "explanation": "Controlled components have their value bound to state, uncontrolled store it in the DOM."
      },
      {
        "id": 6,
        "question": "Which hook is used to access the DOM in a functional component?",
        "options": ["useRef", "useDOM", "useMemo", "useState"],
        "answer": "useRef",
        "explanation": "useRef can store a mutable reference to a DOM element."
      },
      {
        "id": 7,
        "question": "What is the difference between React.memo and useMemo?",
        "options": [
          "React.memo memoizes components, useMemo memoizes values",
          "React.memo memoizes values, useMemo memoizes components",
          "Both memoize components",
          "Both memoize values"
        ],
        "answer": "React.memo memoizes components, useMemo memoizes values",
        "explanation": "React.memo is a higher-order component, useMemo is a hook."
      },
      {
        "id": 8,
        "question": "Which hook is used to handle complex state logic in React?",
        "options": ["useReducer", "useState", "useMemo", "useEffect"],
        "answer": "useReducer",
        "explanation": "useReducer is used for complex state transitions."
      },
      {
        "id": 9,
        "question": "What is the difference between virtual DOM and real DOM?",
        "options": [
          "Virtual DOM is a lightweight copy of the real DOM updated efficiently",
          "Real DOM is faster, virtual DOM is slower",
          "Both are updated at the same speed",
          "Virtual DOM directly updates the UI without reconciliation"
        ],
        "answer": "Virtual DOM is a lightweight copy of the real DOM updated efficiently",
        "explanation": "React updates the virtual DOM first, then applies minimal changes to the real DOM."
      },
      {
        "id": 10,
        "question": "Which method is used to pass data from parent to child component?",
        "options": ["props", "state", "context", "emit"],
        "answer": "props",
        "explanation": "Props are used to pass data from parent to child components."
      },
      {
        "id": 11,
        "question": "What is the difference between state and props?",
        "options": [
          "State is internal and mutable, props are external and immutable",
          "State is external and immutable, props are internal and mutable",
          "Both are internal",
          "Both are immutable"
        ],
        "answer": "State is internal and mutable, props are external and immutable",
        "explanation": "State changes inside the component, props are passed from parent."
      },
      {
        "id": 12,
        "question": "Which hook is used to run code only once when a component mounts?",
        "options": ["useEffect with []", "useMemo", "useState", "useCallback"],
        "answer": "useEffect with []",
        "explanation": "An empty dependency array in useEffect runs the effect only once after mount."
      },
      {
        "id": 13,
        "question": "What is the difference between useCallback and useMemo?",
        "options": [
          "useCallback memoizes functions, useMemo memoizes values",
          "useCallback memoizes values, useMemo memoizes functions",
          "Both memoize functions",
          "Both memoize values"
        ],
        "answer": "useCallback memoizes functions, useMemo memoizes values",
        "explanation": "useCallback returns a memoized callback, useMemo returns a memoized value."
      },
      {
        "id": 14,
        "question": "Which context API function is used to provide data to components?",
        "options": ["Provider", "Consumer", "useContext", "createContext"],
        "answer": "Provider",
        "explanation": "The Provider component supplies context data to child components."
      },
      {
        "id": 15,
        "question": "What is the difference between default export and named export in React?",
        "options": [
          "Default export allows one export per file, named export allows multiple",
          "Named export allows one export per file, default allows multiple",
          "Both allow only one export",
          "Both allow multiple exports"
        ],
        "answer": "Default export allows one export per file, named export allows multiple",
        "explanation": "Default export is imported without curly braces, named exports require curly braces."
      }
    ]
  },
    {
    "domain": "Vanilla JS",
    "questions": [
      {
        "id": 1,
        "question": "Which keyword is used to declare a variable in JavaScript?",
        "options": ["var", "let", "const", "All of the above"],
        "answer": "All of the above",
        "explanation": "JavaScript allows variable declarations using var, let, and const."
      },
      {
        "id": 2,
        "question": "Which method converts a JSON string to a JavaScript object?",
        "options": ["JSON.parse()", "JSON.stringify()", "parseJSON()", "toObject()"],
        "answer": "JSON.parse()",
        "explanation": "JSON.parse() converts JSON strings into JavaScript objects."
      },
      {
        "id": 3,
        "question": "What is the difference between '==' and '===' in JavaScript?",
        "options": [
          "'==' checks value only, '===' checks value and type",
          "'==' checks value and type, '===' checks value only",
          "Both check value only",
          "Both check value and type"
        ],
        "answer": "'==' checks value only, '===' checks value and type",
        "explanation": "'==' performs type coercion, '===' does not."
      },
      {
        "id": 4,
        "question": "Which method is used to add an element to the end of an array?",
        "options": ["push()", "append()", "add()", "insert()"],
        "answer": "push()",
        "explanation": "push() adds one or more elements to the end of an array."
      },
      {
        "id": 5,
        "question": "What is the difference between null and undefined in JavaScript?",
        "options": [
          "null is an assigned value, undefined means a variable is declared but not assigned",
          "undefined is assigned, null means never declared",
          "Both mean uninitialized",
          "Both are the same type"
        ],
        "answer": "null is an assigned value, undefined means a variable is declared but not assigned",
        "explanation": "null is an intentional absence of value, undefined is a default uninitialized state."
      },
      {
        "id": 6,
        "question": "Which function is used to delay execution in JavaScript?",
        "options": ["setTimeout()", "setInterval()", "delay()", "pause()"],
        "answer": "setTimeout()",
        "explanation": "setTimeout() runs a function after a specified delay."
      },
      {
        "id": 7,
        "question": "What is the difference between var and let?",
        "options": [
          "var has function scope, let has block scope",
          "var has block scope, let has function scope",
          "Both have block scope",
          "Both have function scope"
        ],
        "answer": "var has function scope, let has block scope",
        "explanation": "let respects block scope, var does not."
      },
      {
        "id": 8,
        "question": "Which method removes the last element from an array?",
        "options": ["shift()", "pop()", "remove()", "splice()"],
        "answer": "pop()",
        "explanation": "pop() removes the last element from an array."
      },
      {
        "id": 9,
        "question": "What is the difference between synchronous and asynchronous code?",
        "options": [
          "Synchronous runs sequentially, asynchronous can run without blocking",
          "Asynchronous runs sequentially, synchronous can run without blocking",
          "Both run sequentially",
          "Both run without blocking"
        ],
        "answer": "Synchronous runs sequentially, asynchronous can run without blocking",
        "explanation": "Asynchronous operations allow other code to run while waiting."
      },
      {
        "id": 10,
        "question": "Which operator is used to spread elements of an array?",
        "options": ["...", "spread", "->", "*"],
        "answer": "...",
        "explanation": "The spread operator (...) expands iterable elements."
      },
      {
        "id": 11,
        "question": "What is the difference between forEach() and map()?",
        "options": [
          "forEach() iterates without returning, map() returns a new array",
          "map() iterates without returning, forEach() returns a new array",
          "Both return new arrays",
          "Both do not return anything"
        ],
        "answer": "forEach() iterates without returning, map() returns a new array",
        "explanation": "map() transforms elements and returns a new array, forEach() just iterates."
      },
      {
        "id": 12,
        "question": "Which method joins all elements of an array into a string?",
        "options": ["concat()", "join()", "merge()", "combine()"],
        "answer": "join()",
        "explanation": "join() concatenates array elements into a string."
      },
      {
        "id": 13,
        "question": "What is the difference between function declaration and function expression?",
        "options": [
          "Declaration is hoisted, expression is not",
          "Expression is hoisted, declaration is not",
          "Both are hoisted",
          "Neither is hoisted"
        ],
        "answer": "Declaration is hoisted, expression is not",
        "explanation": "Function declarations are hoisted to the top of their scope."
      },
      {
        "id": 14,
        "question": "Which method is used to select an element by ID in JavaScript?",
        "options": ["getElementById()", "querySelector()", "getId()", "selectById()"],
        "answer": "getElementById()",
        "explanation": "getElementById() returns the element with the given ID."
      },
      {
        "id": 15,
        "question": "What is the difference between slice() and splice()?",
        "options": [
          "slice() returns a new array without modifying, splice() changes the original array",
          "splice() returns a new array without modifying, slice() changes the original array",
          "Both modify the original array",
          "Both return new arrays"
        ],
        "answer": "slice() returns a new array without modifying, splice() changes the original array",
        "explanation": "slice() is non-destructive, splice() modifies the array."
      }
    ]
  },
    {
    "domain": "Version Control Systems",
    "questions": [
      {
        "id": 1,
        "question": "Which command initializes a new Git repository?",
        "options": ["git start", "git init", "git new", "git create"],
        "answer": "git init",
        "explanation": "git init creates a new Git repository in the current directory."
      },
      {
        "id": 2,
        "question": "Which command is used to check the current status of the repository?",
        "options": ["git status", "git check", "git log", "git info"],
        "answer": "git status",
        "explanation": "git status shows tracked, untracked, staged, and modified files."
      },
      {
        "id": 3,
        "question": "What is the difference between git pull and git fetch?",
        "options": [
          "git pull fetches and merges changes, git fetch only downloads changes",
          "git pull only downloads changes, git fetch merges changes",
          "Both fetch and merge changes",
          "Both only download changes"
        ],
        "answer": "git pull fetches and merges changes, git fetch only downloads changes",
        "explanation": "git fetch downloads remote changes, git pull does fetch and merge."
      },
      {
        "id": 4,
        "question": "Which command is used to stage changes for commit?",
        "options": ["git add", "git commit", "git stage", "git push"],
        "answer": "git add",
        "explanation": "git add stages changes to be committed."
      },
      {
        "id": 5,
        "question": "What is the difference between git merge and git rebase?",
        "options": [
          "merge creates a merge commit, rebase rewrites commit history",
          "merge rewrites history, rebase creates a merge commit",
          "Both rewrite commit history",
          "Both create merge commits"
        ],
        "answer": "merge creates a merge commit, rebase rewrites commit history",
        "explanation": "Rebase applies commits on top of another base commit, merge combines histories."
      },
      {
        "id": 6,
        "question": "Which command is used to create a new branch in Git?",
        "options": ["git branch", "git create-branch", "git checkout -b", "git new-branch"],
        "answer": "git branch",
        "explanation": "git branch <branch_name> creates a new branch."
      },
      {
        "id": 7,
        "question": "What is the difference between a bare and a non-bare Git repository?",
        "options": [
          "Bare repo has no working directory, non-bare has working directory",
          "Non-bare repo has no working directory, bare has working directory",
          "Both have no working directory",
          "Both have working directories"
        ],
        "answer": "Bare repo has no working directory, non-bare has working directory",
        "explanation": "Bare repositories are used for remote storage without a working copy."
      },
      {
        "id": 8,
        "question": "Which command is used to view commit history?",
        "options": ["git history", "git log", "git commits", "git show-log"],
        "answer": "git log",
        "explanation": "git log shows commit history with details."
      },
      {
        "id": 9,
        "question": "What is the difference between git clone and git fork?",
        "options": [
          "Clone creates a local copy, fork creates a copy on a remote server like GitHub",
          "Fork creates a local copy, clone creates a remote copy",
          "Both create a local copy",
          "Both create a remote copy"
        ],
        "answer": "Clone creates a local copy, fork creates a copy on a remote server like GitHub",
        "explanation": "Forking duplicates a repo on a hosting service, cloning downloads it locally."
      },
      {
        "id": 10,
        "question": "Which command discards changes in the working directory?",
        "options": ["git reset --hard", "git revert", "git remove", "git clean"],
        "answer": "git reset --hard",
        "explanation": "git reset --hard resets the repo to the last commit, discarding changes."
      },
      {
        "id": 11,
        "question": "Which command is used to delete a branch in Git?",
        "options": ["git branch -d", "git delete-branch", "git remove-branch", "git drop-branch"],
        "answer": "git branch -d",
        "explanation": "git branch -d deletes a branch locally."
      },
      {
        "id": 12,
        "question": "What is the difference between git stash and git commit?",
        "options": [
          "Stash temporarily saves changes, commit permanently saves changes",
          "Commit temporarily saves changes, stash permanently saves changes",
          "Both permanently save changes",
          "Both temporarily save changes"
        ],
        "answer": "Stash temporarily saves changes, commit permanently saves changes",
        "explanation": "git stash stores changes for later use without committing them."
      },
      {
        "id": 13,
        "question": "Which command is used to rename the current branch?",
        "options": ["git branch -m", "git rename-branch", "git mv-branch", "git branch-rename"],
        "answer": "git branch -m",
        "explanation": "git branch -m <new_name> renames the current branch."
      },
      {
        "id": 14,
        "question": "Which file is used to ignore files from being tracked in Git?",
        "options": [".gitconfig", ".gitignore", ".gittrack", ".gitkeep"],
        "answer": ".gitignore",
        "explanation": "The .gitignore file lists files and folders Git should not track."
      },
      {
        "id": 15,
        "question": "What is the difference between git reset and git revert?",
        "options": [
          "reset moves HEAD to a previous commit, revert creates a new commit to undo changes",
          "reset creates a new commit, revert deletes commits",
          "Both create new commits",
          "Both delete commits"
        ],
        "answer": "reset moves HEAD to a previous commit, revert creates a new commit to undo changes",
        "explanation": "reset changes the history pointer, revert undoes changes without altering history."
      }
    ]
  }







]
